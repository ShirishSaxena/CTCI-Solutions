public class Main {
/*   Q 1.4 -> Palindrome Permutation: Given a string, write a function to check if it is a permutation of a palindrome.
              A palindrome is a word or phrase that is the same forwards and backwards. A permutation
              is a rearrangement of letters. The palindrome does not need to be limited to just dictionary words.

               Input: Tact Coa
               Output: True (permutations: "taco cat", "atco eta", etc.)
              */

    public static void main(String[] args) {
	    String s = "ratzsliveonnoevilstarz";
        String[] strings = {"Rats live on no evil star",
                "A man, a plan, a canal, panama",
                "Lleve",
                "Tacotac",
                "asda"};
        for(String f : strings)
            System.out.println(f + " : " + Palindrome_Perm(f));
	    //System.out.println(Palindrome_Perm(s));
    }

    static private boolean Palindrome_Perm(String s){
        // first need to check if its of even length or odd
        boolean isEven = false;

        // assuming string is of lower case letter only
        int[] map = new int[26];

        int cleanString_Len = 0;
        // loop to count occurance of char
        char[] str = s.toCharArray();
        for(char c : str) {
            if(c >= 'a' && c <= 'z') {
                map[c - 'a']++;
                cleanString_Len++;
            }
            else if(c >= 'A' && c <= 'Z'){
                map[c - 'A']++;
                cleanString_Len++;
            }
        }

        if(cleanString_Len % 2 == 0) isEven = true;
        int oddCount = 0;

        for (int i = 0; i < 26; i++) {
            if (map[i] % 2 != 0) oddCount++;
        }

        return ((isEven && oddCount == 0) || !isEven && oddCount == 1);
    }
}
